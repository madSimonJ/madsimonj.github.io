{"ast":null,"code":"var _jsxFileName = \"/Users/simonpainter/Documents/GitHub/madsimonj.github.io/src/Components/Talks/index.tsx\";\nimport talkData from './Talks.json';\nimport Talk from './Talk';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Talks = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"I love talking tech, travelling, meeting new people and making a bit of a fool of myself in public. Speaking at conferences and user groups gives me the perfect opportunity to endulge all of those interests. I come up with new talks all the time, and at any given moment there are usually at least two or three new ones in development, but these are the ones I've finished and have been known to subject members of the public to\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"nes-container with-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"title\",\n        children: \"Talks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this), _.reverse(talkData.Talks).map(x => {\n        return /*#__PURE__*/_jsxDEV(Talk, {\n          Details: x\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 29\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_c = Talks;\nexport default Talks;\nvar _c;\n$RefreshReg$(_c, \"Talks\");","map":{"version":3,"names":["talkData","Talk","_","jsxDEV","_jsxDEV","Fragment","_Fragment","Talks","children","fileName","_jsxFileName","lineNumber","columnNumber","className","reverse","map","x","Details","_c","$RefreshReg$"],"sources":["/Users/simonpainter/Documents/GitHub/madsimonj.github.io/src/Components/Talks/index.tsx"],"sourcesContent":["import react from 'react';\nimport talkData from './Talks.json'\nimport Talk from './Talk';\nimport _ from 'lodash'\n\nconst Talks = () => {\n    return (\n        <>\n            <p>I love talking tech, travelling, meeting new people and making a bit of a fool of myself in public. Speaking at conferences and user groups gives me the perfect opportunity to endulge all of those interests. I come up with new talks all the time, and at any given moment there are usually at least two or three new ones in development, but these are the ones I've finished and have been known to subject members of the public to</p>\n            <section className='nes-container with-title'>\n                <h3 className='title'>Talks</h3>\n                {\n                    _.reverse(talkData.Talks).map(x => {\n                        \n                        return (\n                            <Talk Details={x} />\n                        );\n\n                    })\n                }\n            </section>\n            \n        </>\n    );\n};\n\nexport default Talks;"],"mappings":";AACA,OAAOA,QAAQ,MAAM,cAAc;AACnC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,CAAC,MAAM,QAAQ;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEtB,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAChB,oBACIH,OAAA,CAAAE,SAAA;IAAAE,QAAA,gBACIJ,OAAA;MAAAI,QAAA,EAAG;IAA4a;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACnbR,OAAA;MAASS,SAAS,EAAC,0BAA0B;MAAAL,QAAA,gBACzCJ,OAAA;QAAIS,SAAS,EAAC,OAAO;QAAAL,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAE5BV,CAAC,CAACY,OAAO,CAACd,QAAQ,CAACO,KAAK,CAAC,CAACQ,GAAG,CAACC,CAAC,IAAI;QAE/B,oBACIZ,OAAA,CAACH,IAAI;UAACgB,OAAO,EAAED;QAAE;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAG5B,CAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAED,CAAC;EAAA,eAEZ,CAAC;AAEX,CAAC;AAACM,EAAA,GAnBIX,KAAK;AAqBX,eAAeA,KAAK;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}